# 최빈값 찾기


#Tip 문자인지 확인하는 방법
- 파이썬의 내장함수 `str.isalpha()` 를 이용하면 해당 문자열이 알파벳인지 확인 가능하다.

```python
print("a".isalpha())    # True
print("1".isalpha())    # False

s = "abcdefg"
print(s[0].isalpha())    # True
```

### ASCII 코드
- 컴퓨터는 오로지 숫자(이진수 형태)만 저장할 수 없다.
- 컴퓨터가 표현할 수 없는 정보를 컴퓨터에 저장하는 방법을 고민하다가 등장한 개념이다.
- 따라서, 문자를 나타내기로 약속한 숫자들을 정해놓은 것이고, 그 숫자(코드)들을 ASCII 코드라고 한다.
	- 여러 문자들을 숫자로 Mapping 해놓았다.

- `ord()` : 문자열을 ASCII 코드로 변환한다.
	- #참고 
		- 알파벳은 총 26개이다.
		- `ord('a')` : 97

- `chr()` : ASCII 코드를 문자열로 변환해준다.

### code
- 방법1
	- 문자가 해당 문자열에 얼마나 있는지 파악하고, 그 개수가 가장 크다면 변환해줘야 하는 값을 그 알파벳으로 한다.
```python
def find_occurred_alphbet_1(string):
	max_occurrence = 0
	max_alphabet = alphabet_array[0]
	
	for alphabet in alphabet_array:
		occuerrence = 0
		
		for char in string:
			if char == alphabet:
			occurence += 1
			
		if occurrence > max_occurrence:
			max_alphabet = alphabet
			max_occurrence = occurrence
			
	return max_alphabet

  

def find_alpha_occurrenc_array(string):
	alphabet_occurrnece_array = [0] * 26
	
	for char in string:
		if not char.isalpha():
			continue
			
	arr_index = ord(char) - ord('a')
	alphabet_occurrnece_array[arr_index] += 1

  return alphabet_occurrnece_array
```


- ==방법2==
	- 문자열을 받는다.
	- 문자열을 순회하면서 해당 문자가 알파벳이라면, 알파벳을 인덱스로 변환해서 알파벳의 빈도수를 업데이트 한다.

```python
def find_occurred_alphabet_2(string):
	alphabet_occurrence_array = [0] * 26
	
	for char in string:
		if not char.isalpha():
			continue
	
	arr_index = ord(char) - ord('a')
	alphabet_occurrence_array[arr_index] += 1
	
	max_occurrence = 0
	max_alphabet_index = 0
	for index in range(len(alphabet_occurrence_array)):
		alphabet_occurrence = alphabet_occurrence_array[index]
		
		if alphabet_occurrence > max_occurrence:
			max_occurrence = alphabet_occurrence
			max_alphabet_index = index
			
	return chr(max_alphabet_index + ord('a'))
```
